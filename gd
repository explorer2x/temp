javascript: function test(){} async function get_call(url) { console.log('now fetching ' + url); try { var response = await fetch(url, { headers: { 'Accept': 'application/json, text/javascript, */*; q=0.01', } }); if (!response.ok) { throw new Error('Network response was not ok'); } console.log('fetch finished'); return await response.json(); } catch (error) { console.error('There was a problem with the fetch operation:', error); } } async function fetchReport(iDisplayStart) { url = `https://${document.domain}/admin/SearchProviders/report_myreports_search.aspx?sEcho=1&iColumns=7&sColumns=%2CDescription%2CFromUser%2CCreationDate%2C%2CDeliveryEndColumn%2CFileSizeBytes&iDisplayStart=${iDisplayStart}&iDisplayLength=100&mDataProp_0=0&sSearch_0=&bRegex_0=false&bSearchable_0=false&bSortable_0=false&mDataProp_1=1&sSearch_1=&bRegex_1=false&bSearchable_1=true&bSortable_1=true&mDataProp_2=2&sSearch_2=&bRegex_2=false&bSearchable_2=true&bSortable_2=true&mDataProp_3=3&sSearch_3=&bRegex_3=false&bSearchable_3=true&bSortable_3=true&mDataProp_4=4&sSearch_4=&bRegex_4=false&bSearchable_4=true&bSortable_4=false&mDataProp_5=5&sSearch_5=&bRegex_5=false&bSearchable_5=true&bSortable_5=false&mDataProp_6=6&sSearch_6=&bRegex_6=false&bSearchable_6=true&bSortable_6=true&sSearch=&bRegex=false&iSortingCols=0&scope=0&`; res = await get_call(url); return res } async function searchDownload(start_date,end_date) { function removeChar(str) { const pattern = /[\/\\:*?"<>|]/g; const result = str.replace(pattern, ''); return result; } function processReportName(varName) { let tempVar = varName.replace("Activity Report - ", ""); let result = tempVar.split(":")[0].trim(); return result; } function processReportType(varName) { let index = varName.indexOf(" - "); let result = index !== -1 ? varName.substring(0, index).trim() : varName.trim(); return result; } function createXHR() { var XHR = [function() { return new XMLHttpRequest() }, function() { return new ActiveXObject("Msxml2.XMLHTTP") }, function() { return new ActiveXObject("Msxml3.XMLHTTP") }, function() { return new ActiveXObject("Microsoft.XMLHTTP") }]; var xhr = null; for (var i = 0; i < XHR.length; i++) { try { xhr = XHR[i](); } catch (e) { continue } break; } return xhr; }; function getBlob(url, cb) { var xhr = new XMLHttpRequest(); xhr.open("GET", url, true); xhr.responseType = "blob"; xhr.onload = function() { if (xhr.status === 200) { cb(xhr.response); } }; xhr.send(); } function saveAs(blob, filename) { if (window.navigator.msSaveOrOpenBlob) { navigator.msSaveBlob(blob, filename); } else { var link = document.createElement("a"); var body = document.querySelector("body"); link.href = window.URL.createObjectURL(blob); link.download = filename; link.style.display = "none"; body.appendChild(link); link.click(); body.removeChild(link); window.URL.revokeObjectURL(link.href); } } function download(url, filename) { getBlob(url, function(blob) { saveAs(blob, filename); }); } function delay(n) { return new Promise(function(resolve) { setTimeout(resolve, n * 100); }); }; function set_dateformat(date_var) { let year = date_var.getUTCFullYear(); let month = String(date_var.getUTCMonth() + 1).padStart(2, '0'); let day = String(date_var.getUTCDate()).padStart(2, '0'); return `${month}/${day}/${year}` } function get_daterange() { let today = new Date(); let day = today.getDay(); let start_date; if (day == 0 | day == 1) { let last_friday = new Date(today); let daySli = (day === 0) ? 2 : 3; last_friday.setDate(today.getDate() - daySli); start_date = (last_friday); } else { let last_day = new Date(today); last_day.setDate(today.getDate() - 2); start_date = (last_day); } let s_day = new Date(today); s_day.setDate(today.getDate() - 1); let start_day = set_dateformat(start_date); let end_day = set_dateformat(s_day); return { start_day, end_day } } const full_res = []; const initialRes = await fetchReport(0); const totalRecords = initialRes.iTotalRecords; var daterange = get_daterange(); full_res.push(...initialRes.aaData); if (totalRecords > 100) { const pages = Math.ceil(totalRecords / 100); for (let page = 1; page < pages; page++) { const iDisplayStart = page * 100; const res = await fetchReport(iDisplayStart); full_res.push(...res.aaData); } } for (var subarr of full_res) { if (new Date(subarr[3]) >= new Date(daterange.start_day) && new Date(subarr[3]) <= new Date(daterange.end_day)) { report_name = subarr[2][2].replace('/', '-'); report_date = subarr[3].replace('/', '-'); ROTID = subarr[1][1]; urlx = `https://${document.domain}/admin/report_getprepared.aspx?RPTID=${ROTID}`; is_need = subarr[0][2]; if (report_name.includes('Activity Report') && is_need === true) { filename = removeChar(`${processReportName(report_name)} - ${processReportType(report_name)}_${report_date}.xlsx`); download(urlx, filename); await delay(1); } } } } async function job() { await searchDownload(); } job()
